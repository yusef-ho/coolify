# documentation: https://infisical.com/docs/self-hosting/deployment-options/docker-compose
# slogan: Infisical is the open source secret management platform that developers use to centralize their application configuration and secrets like API keys and database credentials as well as manage their internal PKI. Additionally, developers use Infisical to prevent secrets leaks to git and securely share secrets amongst engineers.
# tags: secret,secretops
# icon: svgs/infisical.svg
# port: 8080

version: "3"

x-environment: &environment
  ENCRYPTION_KEY: ${ENCRYPTION_KEY:-6c1fe4e407b8911c104518103505b218}
  AUTH_SECRET: ${AUTH_SECRET:-5lrMXKKWCVocS/uerPsl7V+TX/aaUaI7iDkgl3tSmLE=}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-infisical}
  POSTGRES_USER: ${POSTGRES_USER:-infisical}
  POSTGRES_DB: ${POSTGRES_DB:-infisical}
  DB_CONNECTION_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
  REDIS_URL: "redis://redis:6379"
  SMTP_HOST: ${SMTP_HOST:-}
  SMTP_PORT: ${SMTP_PORT:-}
  SMTP_USERNAME: ${SMTP_USERNAME:-}
  SMTP_PASSWORD: ${SMTP_PASSWORD:-}
  SMTP_FROM_NAME: ${SMTP_FROM_NAME:-}
  SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS:-}
  CLIENT_ID_HEROKU: ${CLIENT_ID_HEROKU:-}
  CLIENT_ID_VERCEL: ${CLIENT_ID_VERCEL:-}
  CLIENT_ID_NETLIFY: ${CLIENT_ID_NETLIFY:-}
  CLIENT_ID_GITHUB: ${CLIENT_ID_GITHUB:-}
  CLIENT_ID_GITLAB: ${CLIENT_ID_GITLAB:-}
  CLIENT_ID_BITBUCKET: ${CLIENT_ID_BITBUCKET:-}
  CLIENT_SECRET_HEROKU: ${CLIENT_SECRET_HEROKU:-}
  CLIENT_SECRET_VERCEL: ${CLIENT_SECRET_VERCEL:-}
  CLIENT_SECRET_NETLIFY: ${CLIENT_SECRET_NETLIFY:-}
  CLIENT_SECRET_GITHUB: ${CLIENT_SECRET_GITHUB:-}
  CLIENT_SECRET_GITLAB: ${CLIENT_SECRET_GITLAB:-}
  CLIENT_SECRET_BITBUCKET: ${CLIENT_SECRET_BITBUCKET:-}
  CLIENT_SLUG_VERCEL: ${CLIENT_SLUG_VERCEL:-}
  SENTRY_DSN: ${SENTRY_DSN:-}
  POSTHOG_HOST: ""
  POSTHOG_PROJECT_API_KEY: ""
  CLIENT_ID_GOOGLE_LOGIN: ${CLIENT_ID_GOOGLE_LOGIN:-}
  CLIENT_SECRET_GOOGLE_LOGIN: ${CLIENT_SECRET_GOOGLE_LOGIN:-}
  CLIENT_ID_GITHUB_LOGIN: ${CLIENT_ID_GITHUB_LOGIN:-}
  CLIENT_SECRET_GITHUB_LOGIN: ${CLIENT_SECRET_GITHUB_LOGIN:-}
  CLIENT_ID_GITLAB_LOGIN: ${CLIENT_ID_GITLAB_LOGIN:-}
  CLIENT_SECRET_GITLAB_LOGIN: ${CLIENT_SECRET_GITLAB_LOGIN:-}
  CAPTCHA_SECRET: ${CAPTCHA_SECRET:-}
  NEXT_PUBLIC_CAPTCHA_SITE_KEY: ${NEXT_PUBLIC_CAPTCHA_SITE_KEY:-}

services:
  db-migration:
    container_name: infisical-db-migration
    depends_on:
      db:
        condition: service_healthy
    image: infisical/infisical:latest-postgres
    environment:
      <<: *environment
    command: npm run migration:latest
    pull_policy: always
    networks:
      - infisical
    restart: no

  backend:
    container_name: infisical-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      db-migration:
        condition: service_completed_successfully
    image: infisical/infisical:latest-postgres
    pull_policy: always
    environment:
      <<: *environment
      NODE_ENV: production
      SITE_URL: $SERVICE_FQDN_INFISICAL
      SERVICE_FQDN_INFISICAL_8080:
    networks:
      - infisical

  redis:
    image: redis
    container_name: infisical-dev-redis
    environment:
      <<: *environment
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - infisical
    volumes:
      - redis_data:/data

  db:
    container_name: infisical-db
    image: postgres:14-alpine
    restart: always
    environment:
      <<: *environment
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - infisical
    healthcheck:
      test: "pg_isready --username=${POSTGRES_USER} && psql --username=${POSTGRES_USER} --list"
      interval: 5s
      timeout: 10s
      retries: 10

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  infisical: